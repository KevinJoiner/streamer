# This file contains all available configuration options
# with their default values (in comments).

# Options for analysis running.
run:
  # The default concurrency value is the number of available CPU.
  concurrency: 4

  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 10s

  # Exit code when at least one issue was found.
  # Default: 1
  issues-exit-code: 1

  # Include test files or not.
  # Default: true
  tests: false

  allow-parallel-runners: false



  gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks'.
    # See https://go-critic.github.io/overview#checks-overview.
    # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`.
    # By default, list of stable checks is used.
  



    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
    # See https://github.com/go-critic/go-critic#usage -> section "Tags".
    # Default: []
    enabled-tags:
      - diagnostic
      - style
      - performance
      - experimental
      - opinionated
    # disabled-tags:
    #   - diagnostic
    #   - style
    #   - performance
    #   - experimental
    #   - opinionated

  govet:
    # Report about shadowed variables.
    # Default: false
    check-shadowing: true

    # Settings per analyzer.
    settings:
      # Analyzer name, run `go tool vet help` to see all analyzers.
      printf:
        # Run `go tool vet help printf` to see available settings for `printf` analyzer.
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

    # Disable all analyzers.
    # Default: false
    disable-all: false
    # Enable analyz naers byme.
    # Run `go tool vet help` to see all analyzers.

    # Enable all analyzers.
    # Default: false
    enable-all: true
    # Disable analyzers by name.
    # Run `go tool vet help` to see all analyzers.

  wsl:
    # See https://github.com/bombsimon/wsl/blob/master/doc/configuration.md for documentation of available settings.
    # These are the defaults for `golangci-lint`.

    # Controls if you may cuddle assignments and anything without needing an empty line between them.
    # Default: false
    allow-assign-and-anything: false

    # Controls if you may cuddle assignments and calls without needing an empty line between them.
    # Default: true
    allow-assign-and-call: true

    # Controls if you're allowed to cuddle multiple declarations.
    # This is false by default to encourage you to group them in one var block.
    # One major benefit with this is that if the variables are assigned the assignments will be tabulated.
    # Default: false
    allow-cuddle-declarations: false

    # Controls if you may cuddle assignments even if they span over multiple lines.
    # Default: true
    allow-multiline-assign: true

    # This option allows whitespace after each comment group that begins a block.
    # Default: false
    allow-separated-leading-comment: false

    # Controls if blocks can end with comments.
    # This is not encouraged sine it's usually code smell but might be useful do improve understanding or learning purposes.
    # To be allowed there must be no whitespace between the comment and the last statement or the comment and the closing brace.
    # Default: false
    allow-trailing-comment: false

    # Can be set to force trailing newlines at the end of case blocks to improve readability.
    # If the number of lines (including comments) in a case block exceeds this number
    # a linter error will be yielded if the case does not end with a newline.
    # Default: 0
    force-case-trailing-whitespace: 0

    # Enforces that an `if` statement checking an error variable is cuddled
    # with the line that assigned that error variable.
    # Default: false
    force-err-cuddling: false

    # Enforces that an assignment which is actually a short declaration (using `:=`)
    # is only allowed to cuddle with other short declarations, and not plain assignments, blocks, etc.
    # This rule helps make declarations stand out by themselves, much the same as grouping var statement.
    # Default: false
    force-short-decl-cuddling: false

    # Controls if the checks for slice append should be "strict"
    # in the sense that it will only allow these assignments to be cuddled with variables being appended.
    # Default: true
    strict-append: true



linters:

  # Enable all available linters.
  # Default: false
  enable-all: true
